#!/bin/sh

VERSION=1.0.0
PROC=ss-redir
PR_NAME="Shadowsocks-libev"
PR_TYPE="–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø—Ä–æ–∫—Å–∏"
DESCRIPTION="–ü—Ä–æ—Ç–æ–∫–æ–ª Shadowsocks"
CONF="/opt/etc/kvl/shadowsocks.json"
ARGS="-u -c $CONF"
# –ü–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞ ( –º–µ—Ç–æ–¥ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å tproxy - –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∏ wg - POINT-TO-POINT —Ç—É–Ω–µ–ª—å)
METOD=tproxy
#–ö–∞–∫ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å TCP –ø–∞–∫–µ—Ç—ã –∏–∑ iptables –≤ –º–æ–¥—É–ª—å —á–µ—Ä–µ–∑ dnat –∏–ª–∏ tproxy
TCP_WAY=dnat
#============================================= —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ==================================================================
PROC_TEST=ss-local
PING_COUNT=10
PING_TIMEOUT=1
TEST_PORT=1889
URL_TEST="http://cachefly.cachefly.net/10mb.test"
#========================================================================================================================================

ansi_red="\033[1;31m";
ansi_white="\033[1;37m";
ansi_green="\033[1;32m";
ansi_yellow="\033[1;33m";
ansi_blue="\033[36m";
#ansi_bell="\007";
#ansi_blink="\033[5m";
#ansi_rev="\033[7m";
#ansi_ul="\033[4m";
ansi_std="\033[m";


if [ -t 1 ]; then
  INTERACTIVE=1
else
  INTERACTIVE=0
fi
# –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏ –ª–∏–Ω–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã
length=$(stty size 2>/dev/null | cut -d' ' -f2)
[ -n "${length}" ] && [ "${length}" -gt 80 ] && LENGTH=$((length*2/3)) || LENGTH=68

print_line() {
	len=$((LENGTH))
	printf "%${len}s\n" | tr " " "-"
}

resolve_ip() {
    local host="$1"
    local dns_server="127.0.0.1"
    nslookup "$host" "$dns_server" 2>/dev/null | \
        awk '/^Address [0-9]+: / && $3 !~ /^127\./ && $3 !~ /:/ { print $3; exit }'
}

# ------------------------------------------------------------------------------------------
#
#	 –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ü–∏–∫–ª–µ
#	 $1 - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
#	 $2 - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#	 $3 - —Ç–∏–ø –≤–≤–æ–¥–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
#		 digit - —Ü–∏—Ñ—Ä–∞
#		 password - –ø–∞—Ä–æ–ª—å –±–µ–∑ –ø–æ–∫–∞–∑–∞ –≤–≤–æ–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
#
# ------------------------------------------------------------------------------------------
read_value() {
	header="$(echo "${1}" | tr -d '?')"
	type="${3}"

	while true; do
		echo -en "${header}${ansi_std} [Q-–≤—ã—Ö–æ–¥]  "
		if [ "${type}" = 'password' ]; then read -rs value; else read -r value; fi
		if [ -z "${value}" ]; then
				echo
				print_line
				echo -e "${ansi_red}–î–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!"
				echo -e "${ansi_green}–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–Ω–æ–≤–∞...${ansi_std}"
				print_line
		elif echo "${value}" | grep -qiE '^Q$' ; then
				eval "${2}=q"
				break
		elif [ "${type}" = 'digit' ] && ! echo "${value}" | grep -qE '^[[:digit:]]{1,6}$'; then
				echo
				print_line
				echo -e "${ansi_red}–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏!"
				echo -e "${ansi_green}–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–Ω–æ–≤–∞...${ansi_std}"
				print_line
		elif [ "${type}" = 'password' ] && ! echo "${value}" | grep -qE '^[a-zA-Z0-9]{8,1024}$' ; then
				echo
				print_line
				echo -e "${ansi_green}–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 –∑–Ω–∞–∫–æ–≤ –∏"
				echo -e "${ansi_green}–¢–û–õ–¨–ö–û –±—É–∫–≤—ã –∏ –¶–ò–§–†–´, ${ansi_red}–±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤!${ansi_std}"
				echo -e "${ansi_red}–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞...${ansi_std}"
				print_line
		else
				eval "${2}=\"\$value\""
				break
		fi
	done
}

# —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è replace-—á–∞—Å—Ç–∏
escape_sed_replace() {
	printf '%s' "$1" | sed -e 's/\\/\\\\/g' -e 's/&/\\&/g' -e 's/[\/]/\\&/g'
}

parser_url(){
  	local SSR_LINK="$1"
  	[ "$INTERACTIVE" -eq 1 ] && [ -z "$SSR_LINK" ] && read_value "${ansi_green}üîó –í–µ–¥–∏—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ss://:" SSR_LINK
  	[ -z "$SSR_LINK" ] || [[ "$SSR_LINK" =~ ^[Qq]$ ]]  && return 1	
	SSR_SERVER_IP=""; SSR_SERVER_PORT=""; SSR_SERVER_CRYPT=""; SSR_SERVER_PASSWD=""
	if [[ -n "${SSR_LINK}" && "${#SSR_LINK}" -gt 6 ]] ; then
		SSR_LINK="$(echo "${SSR_LINK}" | sed -E 's/(.*)[#?\/]\?.*|(.*)#.*/\1\2/')"
		password=$(echo "${SSR_LINK}" | grep -oP "(?<=ss://).*?(?=@)" | base64 -d )
		SSR_SERVER_PASSWD=$(echo "${password}" | cut -d ":" -f 2)
		SSR_SERVER_CRYPT=$(echo "${password}" | cut -d ":" -f 1)
		SSR_SERVER_IP=$(echo "${SSR_LINK}" | grep -oP "(?<=@).*?(?=:)")
		SSR_SERVER_PORT=$(echo "${SSR_LINK}" | sed 's/.*@.*:\([0-9]\{1,6\}\).*/\1/')
	else
		echo -e "${ansi_red}–°—Å—ã–ª–∫–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É!${ansi_std}"
		return 1
	fi
	if [ -z "${SSR_SERVER_PASSWD}" ] || [ -z "${SSR_SERVER_CRYPT}" ] || [ -z "${SSR_SERVER_IP}" ] || [ -z "${SSR_SERVER_PORT}" ] ; then
		echo -e "${ansi_red}–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã! –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!${ansi_std}"
		return 1
	fi
	return 0
}

set_param(){
	if [ -f "${CONF}" ] ; then
		# –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ sed
		ESCAPED_PASSWD=$(escape_sed_replace "$SSR_SERVER_PASSWD")
		sed -i "s/\(\"server\":\).*/\1 \"${SSR_SERVER_IP}\",/; 			\
				s/\(\"server_port\":\).*/\1 ${SSR_SERVER_PORT},/; 		\
				s/\(\"password\":\).*/\1 \"${ESCAPED_PASSWD}\",/; 	\
				s/\(\"method\":\).*/\1 \"${SSR_SERVER_CRYPT}\",/;" 		\
				"${CONF}" &>/dev/null
		if [ $? ]; then
			echo -e "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ${CONF} –∏–∑–º–µ–Ω–µ–Ω–∞ ${ansi_green}–£–°–ü–ï–®–ù–û${ansi_std}"
			return 0
		else
			echo -e "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ${CONF} –∏–∑–º–µ–Ω–µ–Ω–∞ ${ansi_red}C –û–®–ò–ë–ö–ê–ú–ò${ansi_std}"
			return 1
		fi
	else
		print_line
		echo -e "${ansi_red}–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª ${CONF}.${ansi_std}"
		print_line
		return 1
	fi
}

set_param_manual(){
	SSR_SERVER_IP=""; SSR_SERVER_PORT=""; SSR_SERVER_CRYPT=""; SSR_SERVER_PASSWD=""
	echo "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:"
	echo -e "${ansi_green}–•–æ—Å—Ç${ansi_std} —Å–µ—Ä–≤–µ—Ä–∞, –µ–≥–æ ${ansi_green}–ø–æ—Ä—Ç, –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞${ansi_std} –∏ ${ansi_green}–º–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è${ansi_std}"
	echo -e "${ansi_blue}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ.${ansi_std}"
	echo -e "–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ ${ansi_yellow}q –∏–ª–∏ Q${ansi_std} –∏ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
	print_line
	read_value "–í–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –∏–ª–∏ IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:" SSR_SERVER_IP
	[[ "$SSR_SERVER_IP" =~ ^[Qq]$ ]] && return 1
	read_value "–í–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞:" SSR_SERVER_PORT 'digit'
	[[ "$SSR_SERVER_PORT" =~ ^[Qq]$ ]] && return 1
	read_value "–í–µ–¥–∏—Ç–µ –º–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞:" SSR_SERVER_CRYPT
	[[ "$SSR_SERVER_CRYPT" =~ ^[Qq]$ ]] && return 1
	read_value "–í–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞:" SSR_SERVER_PASSWD 'password'
	[[ "$SSR_SERVER_PASSWD" =~ ^[Qq]$ ]] && return 1
	echo
	set_param
}

ping_start_bg() {
    local ping_host="$1"
    (
	  trap 'kill "$pid" 2>/dev/null' EXIT			
	  ping -c "$PING_COUNT" -W "$PING_TIMEOUT" "$ping_host" 2>&1 &
	  pid=$!
      #ping -c "$PING_COUNT" -W "$PING_TIMEOUT" "$ping_host" 2>&1 
	  wait "$pid"
      echo -e "${ansi_yellow}‚ö†Ô∏è  –ü–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ —Ç–µ—Å—Ç—ã –≤—Å—ë –µ—â—ë –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...${ansi_std}"
    ) & 
    PING_PID=$!
}

start_speed_test() {
  local log_file="$1"
  local max_attempts=2
  local attempt=1
  local timeout=90

  while [ $attempt -le $max_attempts ]; do
    speed_test=$(curl -s --max-time "$timeout" -w "%{http_code}|%{size_download}|%{time_namelookup}|%{time_connect}|%{time_starttransfer}|%{time_total}|%{speed_download}\n" \
        -x socks5://127.0.0.1:$TEST_PORT -o /dev/null "$URL_TEST")

    IFS='|' read -r http_code size_file t_namelookup t_connect t_starttransfer t_total speed_bytes <<EOF
$speed_test
EOF
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—Ö: –∫–æ–¥ 200 –∏ —Ä–∞–∑–º–µ—Ä —Ö–æ—Ç—è –±—ã 10 –ú–ë (10485760 –±–∞–π—Ç)
    if [ "$http_code" = "200" ] && [ "$size_file" -ge 10485760 ]; then
      return 0
    fi
	download_time_s=$(awk "BEGIN { printf \"%.1f\", $t_total - $t_starttransfer }")
	size_mb=$(awk "BEGIN { printf \"%.3f\", ($size_file * 8) / 1024000 }")
    speed_mbps=$(awk "BEGIN { printf \"%.2f\", ($speed_bytes * 8) / 1000000 }")
    echo "–ü–æ–ø—ã—Ç–∫–∞ $attempt –∏–∑ $max_attempts –Ω–µ —É–¥–∞–ª–∞—Å—å (–∫–æ–¥: $http_code, —Ä–∞–∑–º–µ—Ä: $size_mb –ú–ë, —Å–∫–æ—Ä–æ—Å—Ç—å $speed_mbps –ú–±/—Å, –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è $download_time_s —Å–µ–∫), –ø–æ–≤—Ç–æ—Ä ..." >> "$log_file"
	t_total_int=$(printf "%.0f" "$t_total")
	if [ "$t_total_int" -ge "$(timeout - 2)" ]; then
		break
	fi	
    attempt=$((attempt + 1))
    sleep 5
  done
  return 1
}

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ—Ä–≤–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç —É–±–∏—Ç—å –∏ –¥–æ—á–µ—Ä–Ω–∏–µ –µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å
cleanup_test() {
  if [ -n "$PING_PID" ] && kill -0 "$PING_PID" 2>/dev/null; then
    kill "$PING_PID" 2>/dev/null
  fi
  if [ -n "$SS_PID" ] && kill -0 "$SS_PID" 2>/dev/null; then
    kill "$SS_PID" 2>/dev/null
  fi  
}

test_url(){
  local temp_pid="/tmp/ss-test.pid"
  local temp_log="/tmp/ss-test.log"
  local temp_std="/tmp/ss-test.std"
  trap cleanup_test EXIT INT TERM
  # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∏–Ω–≥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
  echo -e "${ansi_blue}–ó–∞–ø—É—Å–∫–∞–µ–º ss-local —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç—ã –≤ —Ñ–æ–Ω–µ${ansi_std}"
  echo -e "${ansi_white}–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ ‚Äî –æ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤${ansi_std}"
  ping_start_bg "$SSR_SERVER_IP"
  : > "$temp_std"
    # –ó–∞–ø—É—Å–∫ ss-local –≤–æ —Ñ–æ–Ω–µ
  rm -f "$temp_pid"		
  "$PROC_TEST" -s "$SSR_SERVER_IP" -p "$SSR_SERVER_PORT" -l "$TEST_PORT" -k "$SSR_SERVER_PASSWD" -m "$SSR_SERVER_CRYPT" -f "$temp_pid" -b 127.0.0.1 -v >"$temp_log" 2>&1 &
  while [ ! -s "$temp_pid" ]; do sleep 1; done
  SS_PID=$(cat $temp_pid)
  # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–º–∞–∫—Å 10 —Å–µ–∫—É–Ω–¥)
    i=0
    while [ "$i" -lt 10 ]; do
      if kill -0 "$SS_PID" 2>/dev/null; then
        echo -e "${ansi_green}‚úÖ ss-local test instance –±—ã–ª –∑–∞–ø—É—â–µ–Ω (PID: $SS_PID)${ansi_std}" >> $temp_std
        break
      fi
    sleep 1
    i=$((i + 1))
  done
  # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É—Å–ø–µ–ª –ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å
  if ! kill -0 "$SS_PID" 2>/dev/null; then
    echo -e "${ansi_red}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ss-local test instance${ansi_std}" >> $temp_std
    [ -f "$temp_log" ] && { echo "--- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞ ---"; cat "$temp_log"; } >> $temp_std
    return 1
  fi
  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ª–æ–≥ —Ñ–∞–π–ª–µ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è 
  i=0
  success=0
  while [ $i -lt 10 ]; do
      sleep 1
      # –ï—Å–ª–∏ –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç ‚Äî —É—Å–ø–µ—Ö
      if netstat -lnpt 2>/dev/null | grep -q ":$TEST_PORT"; then
        success=1
        break
      fi
      if grep -q "Failed to start" "$temp_log"; then
        success=0
        break
      fi
      i=$((i + 1))
  done

  if [ "$success" -eq 0 ]; then
      echo -e "${ansi_red}‚ùå –û—à–∏–±–∫–∞: –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è –ø–æ—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: $TEST_PORT${ansi_std}" >> $temp_std
      cat "$temp_log"
      kill "$SS_PID" 2>/dev/null
      rm -f "$temp_log" "$temp_pid"
      return 1
  fi

  echo -e "${ansi_white}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –Ω–∞ myip.wtf ...${ansi_std}" >> $temp_std
  local output
  local flag_speed_test=0
  output=$(curl -s --max-time 10 -x socks5://127.0.0.1:$TEST_PORT https://myip.wtf/json)
  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω
  if echo "$output" | grep -q '"YourFuckingIPAddress"'; then
    echo -e "${ansi_green}‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ myip.wtf:${ansi_std}" >> $temp_std
    echo -e "${ansi_white}   üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏ ...${ansi_std}" >> $temp_std
    
    if start_speed_test "$temp_std"; then
      # –í—ã—á–∏—Å–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é awk
      echo -e "${ansi_green}    ‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏${ansi_std}" >> $temp_std
      flag_speed_test=1
      latency_ms=$(awk "BEGIN { printf \"%.2f\", ($t_connect - $t_namelookup) * 1000 }")
      wait_ms=$(awk "BEGIN { printf \"%.2f\", ($t_starttransfer - $t_connect) * 1000 }")
      download_time_s=$(awk "BEGIN { printf \"%.2f\", $t_total - $t_starttransfer }")
      speed_mbps=$(awk "BEGIN { printf \"%.2f\", ($speed_bytes * 8) / 1000000 }")
      dns_ms=$(awk "BEGIN { printf \"%.2f\", $t_namelookup * 1000 }")   
    fi  
  fi
  
  if kill "$PING_PID" 2>/dev/null; then
    i=0
    while [ "$i" -lt 5 ]; do
        if ! kill -0 "$PING_PID" 2>/dev/null; then
            break
        fi
        sleep 1
        i=$((i + 1))
    done
    if kill -0 "$PING_PID" 2>/dev/null; then
        echo -e "${ansi_yellow}‚ö†Ô∏è PING –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ${ansi_std}" >> $temp_std
        kill -9 "$PING_PID" 2>/dev/null
    fi
  fi
  # –í—ã–≤–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω —Ç–æ —á—Ç–æ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
  cat $temp_std

  # –£–±–∏—Ç—å ss-local
  echo -e "${ansi_white}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É ss-local${ansi_std}" 
  if kill "$SS_PID" 2>/dev/null; then
    i=0
    while [ "$i" -lt 5 ]; do
        if ! kill -0 "$SS_PID" 2>/dev/null; then
            break
        fi
        sleep 1
        i=$((i + 1))
    done
    if kill -0 "$SS_PID" 2>/dev/null; then
        echo -e "${ansi_yellow}‚ö†Ô∏è ss-local –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ${ansi_std}"
        kill -9 "$SS_PID" 2>/dev/null
    fi
  fi
   

    # –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
    if echo "$output" | grep -q '"YourFuckingIPAddress"'; then
        echo -e "${ansi_green}‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫:${ansi_std}"
        echo "$output" | awk '
            /"YourFuckingIPAddress"/   { sub(/^.*: /, ""); gsub(/[",]/,""); print "   üåê IP         : " $0 }
            /"YourFuckingLocation"/    { sub(/^.*: /, ""); gsub(/[",]/,""); print "   üìç Location   : " $0 }
            /"YourFuckingHostname"/    { sub(/^.*: /, ""); gsub(/[",]/,""); print "   üñ• Hostname    : " $0 }
            /"YourFuckingISP"/         { sub(/^.*: /, ""); gsub(/[",]/,""); print "   üè¢ ISP        : " $0 }
            /"YourFuckingCity"/        { sub(/^.*: /, ""); gsub(/[",]/,""); print "   üèô City        : " $0 }
            /"YourFuckingCountry"/     { sub(/^.*: /, ""); gsub(/[",]/,""); print "   üåé Country    : " $0 }
        '
        if [ "$flag_speed_test" = "1" ]; then
          print_line
          echo " ‚è±Ô∏è  DNS Lookup:        $dns_ms –º—Å"
          echo " ‚è±Ô∏è  –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å TCP:   $latency_ms –º—Å"
          echo " ‚è±Ô∏è  –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞:   $wait_ms –º—Å"
          echo " ‚è±Ô∏è  –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:  $download_time_s —Å–µ–∫"
          echo "     –°–∫–æ—Ä–æ—Å—Ç—å:          $speed_mbps –ú–±–∏—Ç/—Å"
        fi

    else
        echo -e "${ansi_red}‚ùå –ü—Ä–æ—Ç–æ–∫–æ–ª Shadowsocks –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ —Å–∞–π—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç${ansi_std}"
        echo -e "${ansi_white}üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ $temp_log:${ansi_std}"
        print_line
        cat "$temp_log"
    fi
    # –û—á–∏—Å—Ç–∫–∞
    rm -f "$temp_pid" "$temp_log" "$temp_std"
}

start(){
	# –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω–∞/–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
	[ "$INTERACTIVE" -eq 1 ] && echo -e -n "$ansi_white Starting $PR_NAME... $ansi_std"
    if pidof "$PROC" >/dev/null; then
	  [ "$INTERACTIVE" -eq 1 ] && echo -e "            $ansi_yellow already running. $ansi_std" || echo '{"status":"alive"}';
      return 0
    fi
    # shellcheck disable=SC2086 
    $PROC $ARGS > /dev/null 2>&1 &
    i=0
    while [ "$i" -lt 10 ]; do
      sleep 1
      if pidof "$PROC" >/dev/null; then
	  	[ "$INTERACTIVE" -eq 1 ] && echo -e "            $ansi_green done. $ansi_std"
        logger "Started $$PR_NAME successfully."
        return 0
      fi
      i=$((i + 1))
    done
	[ "$INTERACTIVE" -eq 1 ] && echo -e "            $ansi_red failed. $ansi_std"
    logger "Failed to start $PR_NAME"
    return 255
}

stop() {
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–º–æ–Ω–∞/–æ—Ç–∫–∞—Ç
	case "$1" in
		stop | restart)
			[ "$INTERACTIVE" -eq 1 ] && echo -e -n "$ansi_white Shutting down $PROC... $ansi_std"
    		killall "$PROC" 2>/dev/null
    		i=0
    		LIMIT=10
			while [ "$i" -lt "$LIMIT" ]; do
				sleep 1
				if ! pidof "$PROC" >/dev/null; then
					[ "$INTERACTIVE" -eq 1 ] && echo -e "            $ansi_green done. $ansi_std"
					logger "Stopped $PROC successfully."
					return 0
				fi
				i=$((i + 1))
			done
		;;
    	kill)
            [ "$INTERACTIVE" -eq 1 ] && echo -e -n "$ansi_white Killing $PROC... $ansi_std"
            killall -9 $PROC 2>/dev/null
			if ! pidof "$PROC" >/dev/null; then
				[ "$INTERACTIVE" -eq 1 ] && echo -e "            $ansi_green done. $ansi_std"
				logger "Stopped $PROC successfully."
				return 0
			fi			
        ;;
	esac	
	[ "$INTERACTIVE" -eq 1 ] && echo -e "            $ansi_red failed. $ansi_std"	
    logger "Failed to stop $PROC"
    return 255
}

check() {
    [ "$INTERACTIVE" -eq 1 ] && echo -e -n "$ansi_white Checking $PR_NAME... $ansi_std"
    if pidof "$PROC" >/dev/null; then
        [ "$INTERACTIVE" -eq 1 ] && echo -e "            $ansi_green alive. $ansi_std" || echo '{"status":"alive"}';
        return 0
    else
        [ "$INTERACTIVE" -eq 1 ] && echo -e "            $ansi_red dead. $ansi_std" || echo '{"status":"dead"}';
        return 1
    fi
}

case "$1" in
  start)
	start
    ;;
  stop|kill)
	stop "$1"
    ;;
  restart)
    check > /dev/null && stop "$1"
    start
    ;;	
  check|status)
    check
    ;;	
  info)
    if [ "$INTERACTIVE" -eq 1 ]; then
        echo "–ü–ª–∞–≥–∏–Ω: $PR_NAME –í–µ—Ä—Å–∏—è –ø–ª–∞–≥–∏–Ω–∞: $VERSION"
		echo "–¢–∏–ø: $PR_TYPE"
		echo "–û–ø–∏—Å–∞–Ω–∏–µ: $DESCRIPTION"
    else
        echo "{\"name\":\"$PR_NAME\",\"description\":\"$DESCRIPTION\",\"type\":\"$PR_TYPE\",\"method\":\"$METOD\"}"
    fi
    ;;
  get_param)
    local_port=$(jq -r '.local_port' "$CONF")
    server=$(jq -r '.server' "$CONF")
	  mode=$(jq -r '.mode' "$CONF")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ UDP
    if echo "$ARGS" | grep -qw -- '-u' || echo "$mode" | grep -q 'udp'; then
      udp="yes"
    else
      udp="no"
    fi
    ip=$(resolve_ip "$server")
    echo "{\"inface_cli\":\"$PR_NAME\",\"method\":\"$METOD\",\"udp\":\"$udp\",\"tcp_way\":\"$TCP_WAY\",\"tcp_port\":\"$local_port\",\"udp_port\":\"$local_port\",\"server_ip\":\"$ip\"}"
    ;;
  set_param)
	  set_param_manual
	  ;;
  url)
	case "$2" in
      set)
        # —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ ss:// ‚Äî –ø–ª–∞–≥–∏–Ω —Å–∞–º —Ä–∞–∑–±–∏—Ä–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç
		    parser_url "$3" && set_param
        ;;
      test)
        parser_url "$3" && test_url
        ;;  
      *)
        echo "Usage: $0 url (set|test)" >&2; exit 1
        ;;  
    esac
    ;;
  *)
    echo "Usage: $0 (start|restart|stop|check|status|info|get_param|url|set_param)" >&2; exit 1
    ;;
esac

